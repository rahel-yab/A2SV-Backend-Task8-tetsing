name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go-version: [1.21, 1.22, 1.23]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go-version }}
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install dependencies
        run: go mod download

      - name: Run tests with coverage
        run: |
          go test ./... -v -coverprofile=coverage.out -covermode=atomic
          go tool cover -func=coverage.out

      - name: Check test coverage threshold
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Test coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "❌ Test coverage is below 80% threshold"
            exit 1
          else
            echo "✅ Test coverage meets 80% threshold"
          fi

      - name: Run linting
        run: |
          go install golang.org/x/lint/golint@latest
          golint ./...

      - name: Run vet
        run: go vet ./...

      - name: Check formatting
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "❌ Code is not properly formatted"
            gofmt -s -d .
            exit 1
          else
            echo "✅ Code is properly formatted"
          fi

      - name: Generate coverage report
        run: go tool cover -html=coverage.out -o coverage.html

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.go-version }}
          path: |
            coverage.out
            coverage.html
